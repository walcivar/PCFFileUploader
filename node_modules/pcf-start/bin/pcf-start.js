#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (C) Microsoft Corporation. All rights reserved.
var apptelemetryclient_1 = require("../generated/apptelemetryclient");
var path = require('path');
var fs = require('fs');
var argv = require('yargs').argv;
var bs = require('browser-sync').create();
var pathToPackageJson = path.join(__dirname, '..', 'package.json');
var version = undefined;
if (fs.existsSync(pathToPackageJson)) {
    var packageJson = require(pathToPackageJson);
    version = packageJson && packageJson.version ? packageJson.version : undefined;
}
var telemetryClient = new apptelemetryclient_1.AppTelemetryClient('pcf-start', version || '0.0.1');
console.log("\nStarting control harness...");
var customProperties = {};
if (argv.watch) {
    customProperties['argumentNamesCsv'] = 'watch';
}
if (process.env['PP_TOOLS_AUTOMATION_AGENT']) {
    customProperties['automationAgent'] = process.env['PP_TOOLS_AUTOMATION_AGENT'];
}
var resultCode = 0;
var startTime = Date.now();
try {
    telemetryClient.trackEvent({ name: apptelemetryclient_1.TelemetryEvent[apptelemetryclient_1.TelemetryEvent.Start] });
    var codePath = argv.codePath;
    // default to cwd if not specified
    if (!codePath || codePath === true) {
        codePath = '.';
    }
    else if (!fs.existsSync(path.resolve(process.cwd(), codePath))) {
        console.error("The specified codePath '" + codePath + "' does not exist.");
        resultCode = 400;
        process.exit(1);
    }
    // Start server
    bs.init({
        online: false,
        port: 8181,
        reloadDelay: 1000,
        server: {
            baseDir: path.resolve(process.cwd(), codePath),
            routes: {
                '/': path.join(__dirname, '../')
            }
        },
        ui: false,
        watch: true // node_modules ignored automatically
    });
    resultCode = 200;
}
catch (e) {
    console.error("[pcf-start] [Error] encountered unexpected error:\n" + e);
    telemetryClient.trackException({ exception: e });
    resultCode = 500;
}
finally {
    telemetryClient.trackEvent({ name: apptelemetryclient_1.TelemetryEvent[apptelemetryclient_1.TelemetryEvent.End] });
    telemetryClient.trackRequest({
        name: 'Session',
        url: '',
        duration: Date.now() - startTime,
        resultCode: resultCode,
        success: resultCode === 200,
        properties: customProperties
    });
    telemetryClient.flush();
}
