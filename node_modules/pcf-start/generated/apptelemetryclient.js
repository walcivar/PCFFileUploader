"use strict";
// Copyright (C) Microsoft Corporation. All rights reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildSource = exports.TelemetryEvent = exports.AppTelemetryClient = void 0;
var applicationinsights_1 = require("applicationinsights");
var localfileusersettings_1 = require("./localfileusersettings");
var customtelemetryconfiguration_1 = require("./customtelemetryconfiguration");
var appdata_1 = require("./appdata");
var uuid_1 = require("uuid");
var path = require("path");
var AppTelemetryClient = /** @class */ (function () {
    function AppTelemetryClient(productName, productVersion) {
        var applicationPath = path.join(appdata_1.appDataPath, 'Microsoft', 'PowerAppsCli');
        var settings = localfileusersettings_1.readUserSettings(applicationPath);
        if (settings.telemetryEnabled) {
            try {
                applicationinsights_1.setup(customtelemetryconfiguration_1.applicationInsightsKey)
                    // suppress confusing DNS/http warnings if AI endpoints are not reachable
                    .setInternalLogging(false, false)
                    .setAutoCollectExceptions(false)
                    .start();
                applicationinsights_1.defaultClient.context.tags[applicationinsights_1.defaultClient.context.keys.userId] = settings.uniqueId;
                applicationinsights_1.defaultClient.context.tags[applicationinsights_1.defaultClient.context.keys.cloudRoleInstance] = '#####';
                applicationinsights_1.defaultClient.context.tags[applicationinsights_1.defaultClient.context.keys.cloudRole] = productName;
                applicationinsights_1.defaultClient.context.tags[applicationinsights_1.defaultClient.context.keys.applicationVersion] = productVersion;
                applicationinsights_1.defaultClient.context.tags[applicationinsights_1.defaultClient.context.keys.sessionId] = uuid_1.v4();
                this.client = applicationinsights_1.defaultClient;
            }
            catch (error) {
                console.log("Warning: Cannot setup telemetry client: " + error);
            }
        }
    }
    AppTelemetryClient.prototype.trackEvent = function (telemetry) {
        var _a;
        try {
            (_a = this.client) === null || _a === void 0 ? void 0 : _a.trackEvent(telemetry);
        }
        catch (error) { /* don't fail pcf-* due to telemetry errors */ }
    };
    AppTelemetryClient.prototype.trackException = function (telemetry) {
        var _a;
        try {
            (_a = this.client) === null || _a === void 0 ? void 0 : _a.trackException(telemetry);
        }
        catch (error) { /* don't fail pcf-* due to telemetry errors */ }
    };
    AppTelemetryClient.prototype.trackRequest = function (telemetry) {
        var _a;
        try {
            (_a = this.client) === null || _a === void 0 ? void 0 : _a.trackRequest(telemetry);
        }
        catch (error) { /* don't fail pcf-* due to telemetry errors */ }
    };
    AppTelemetryClient.prototype.flush = function () {
        var _a;
        try {
            (_a = this.client) === null || _a === void 0 ? void 0 : _a.flush();
        }
        catch (error) { /* don't fail pcf-* due to telemetry errors */ }
    };
    return AppTelemetryClient;
}());
exports.AppTelemetryClient = AppTelemetryClient;
var TelemetryEvent;
(function (TelemetryEvent) {
    TelemetryEvent[TelemetryEvent["Start"] = 0] = "Start";
    TelemetryEvent[TelemetryEvent["End"] = 1] = "End";
    TelemetryEvent[TelemetryEvent["StartExecutingVerb"] = 2] = "StartExecutingVerb";
    TelemetryEvent[TelemetryEvent["EndExecutingVerb"] = 3] = "EndExecutingVerb";
})(TelemetryEvent = exports.TelemetryEvent || (exports.TelemetryEvent = {}));
var BuildSource;
(function (BuildSource) {
    BuildSource[BuildSource["VisualStudio"] = 0] = "VisualStudio";
    BuildSource[BuildSource["MSBuild"] = 1] = "MSBuild";
    BuildSource[BuildSource["NPM"] = 2] = "NPM";
})(BuildSource = exports.BuildSource || (exports.BuildSource = {}));
