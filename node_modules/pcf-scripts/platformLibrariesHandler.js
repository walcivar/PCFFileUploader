"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformLibrariesHandler = void 0;
const fs = require("fs");
const path = require("path");
const semver = require('semver');
class PlatformLibrariesHandler {
    constructor(platformLibsVersionsFilePath) {
        this._platformLibsVersions = this.loadVersionsFromFile(platformLibsVersionsFilePath);
    }
    static hasPlatformLibs(control) {
        return control.getControlManifest().data.manifest.control.resources['platform-library'] !== undefined;
    }
    getLatestVersions() {
        const reactAlias = this._platformLibsVersions.react.sort(versionComparer())[0].libAlias;
        const fluentAlias = this._platformLibsVersions.fluent.sort(versionComparer())[0].libAlias;
        let extObj = [{
                '@fluentui/react': fluentAlias,
                'react': reactAlias
            },
            function ({ context, request }, callback) {
                if (/^(@fluentui\/(react$|react\/))/.test(request)) {
                    return callback(undefined, fluentAlias);
                }
                callback();
            }
        ];
        return extObj;
        function versionComparer() {
            return (a, b) => semver.rcompare(a.maxVersion, b.maxVersion);
        }
    }
    loadVersionsFromFile(filePath) {
        filePath = filePath !== null && filePath !== void 0 ? filePath : path.resolve(__dirname, PlatformLibrariesHandler._defaultPlatformLibsPath);
        let versions = fs.readFileSync(filePath, 'utf8');
        return JSON.parse(versions);
    }
}
exports.PlatformLibrariesHandler = PlatformLibrariesHandler;
PlatformLibrariesHandler._defaultPlatformLibsPath = './PlatformLibraryVersions.json';

//# sourceMappingURL=platformLibrariesHandler.js.map
